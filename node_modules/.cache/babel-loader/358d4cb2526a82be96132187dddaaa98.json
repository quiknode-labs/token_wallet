{"ast":null,"code":"var _jsxFileName = \"/Users/sahilsen/QuickNode/token_wallet/src/App.js\",\n    _s = $RefreshSig$();\n\n//src/App.js\n//Import libraries and components\nimport { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport NFTCard from './components/NFTCard';\nimport CollectionSearch from './components/CollectionSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //State variables\n  const [nfts, setNFTs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [address, setAddress] = useState('0xaAdBA140Ae5e4c8a9eF0Cc86EA3124b446e3E46A'); //function to fetch nfts by collection\n\n  const fetchCollection = async () => {\n    const provider = new ethers.providers.JsonRpcProvider(\"<YOUR QUICKNODE HTTP ENDPOINT>\");\n    const collection = await provider.send(\"qn_fetchNFTsByCollection\", {\n      collection: address,\n      page: 1,\n      perPage: 10\n    });\n    return collection;\n  }; //useEffect renders every time address is set\n\n\n  useEffect(() => {\n    fetchCollection().then(data => {\n      setNFTs(data.tokens);\n      setIsLoading(false);\n      console.log(data);\n    }).catch(err => setNFTs([]));\n  }, [address]); //jsx containing our conditional rendering\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(CollectionSearch, {\n      searchText: text => setAddress(text)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), !isLoading && nfts.length === 0 && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-5xl text-center mx-auto mt-32\",\n      children: \"No Collection Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4\",\n      children: nfts.map(token => /*#__PURE__*/_jsxDEV(NFTCard, {\n        nft: token\n      }, token.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 28\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nsbtFrdyFpRl2cVogTBgOSor56M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","NFTCard","CollectionSearch","App","nfts","setNFTs","isLoading","setIsLoading","address","setAddress","fetchCollection","provider","providers","JsonRpcProvider","collection","send","page","perPage","then","data","tokens","console","log","catch","err","text","length","map","token","name"],"sources":["/Users/sahilsen/QuickNode/token_wallet/src/App.js"],"sourcesContent":["//src/App.js\n//Import libraries and components\nimport { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport NFTCard from './components/NFTCard';\nimport CollectionSearch from './components/CollectionSearch';\n\n\nfunction App() {\n  //State variables\n  const [nfts, setNFTs] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [address, setAddress] = useState('0xaAdBA140Ae5e4c8a9eF0Cc86EA3124b446e3E46A')\n\n  //function to fetch nfts by collection\n  const fetchCollection = async () => {\n    const provider = new ethers.providers.JsonRpcProvider(\"<YOUR QUICKNODE HTTP ENDPOINT>\");\n    const collection = await provider.send(\"qn_fetchNFTsByCollection\", {\n      collection: address,\n      page: 1,\n      perPage: 10})\n    return collection\n  }\n\n  //useEffect renders every time address is set\n  useEffect(() => {\n    fetchCollection()\n    .then(data => {\n      setNFTs(data.tokens)\n      setIsLoading(false)\n      console.log(data)\n    })\n    .catch(err => setNFTs([]))\n  }, [address]);\n\n  \n  //jsx containing our conditional rendering\n  return (\n    <div className='container mx-auto'>\n      <CollectionSearch searchText={(text) => setAddress(text)} />\n      {!isLoading && nfts.length === 0 && <h1 className='text-5xl text-center mx-auto mt-32'>No Collection Found</h1>}\n      <div className='grid grid-cols-3 gap-4'>\n        {nfts.map(token => <NFTCard key={token.name} nft={token} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;;AAAA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,4CAAD,CAAtC,CAJa,CAMb;;EACA,MAAMW,eAAe,GAAG,YAAY;IAClC,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,eAArB,CAAqC,gCAArC,CAAjB;IACA,MAAMC,UAAU,GAAG,MAAMH,QAAQ,CAACI,IAAT,CAAc,0BAAd,EAA0C;MACjED,UAAU,EAAEN,OADqD;MAEjEQ,IAAI,EAAE,CAF2D;MAGjEC,OAAO,EAAE;IAHwD,CAA1C,CAAzB;IAIA,OAAOH,UAAP;EACD,CAPD,CAPa,CAgBb;;;EACAhB,SAAS,CAAC,MAAM;IACdY,eAAe,GACdQ,IADD,CACMC,IAAI,IAAI;MACZd,OAAO,CAACc,IAAI,CAACC,MAAN,CAAP;MACAb,YAAY,CAAC,KAAD,CAAZ;MACAc,OAAO,CAACC,GAAR,CAAYH,IAAZ;IACD,CALD,EAMCI,KAND,CAMOC,GAAG,IAAInB,OAAO,CAAC,EAAD,CANrB;EAOD,CARQ,EAQN,CAACG,OAAD,CARM,CAAT,CAjBa,CA4Bb;;EACA,oBACE;IAAK,SAAS,EAAC,mBAAf;IAAA,wBACE,QAAC,gBAAD;MAAkB,UAAU,EAAGiB,IAAD,IAAUhB,UAAU,CAACgB,IAAD;IAAlD;MAAA;MAAA;MAAA;IAAA,QADF,EAEG,CAACnB,SAAD,IAAcF,IAAI,CAACsB,MAAL,KAAgB,CAA9B,iBAAmC;MAAI,SAAS,EAAC,oCAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFtC,eAGE;MAAK,SAAS,EAAC,wBAAf;MAAA,UACGtB,IAAI,CAACuB,GAAL,CAASC,KAAK,iBAAI,QAAC,OAAD;QAA0B,GAAG,EAAEA;MAA/B,GAAcA,KAAK,CAACC,IAApB;QAAA;QAAA;QAAA;MAAA,QAAlB;IADH;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GAtCQ1B,G;;KAAAA,G;AAwCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}